{
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "container.cnrm.cloud.google.com/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "ContainerNodePool"
      ]
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "type": [
        "object",
        "null"
      ],
      "required": [
        "clusterRef",
        "location"
      ],
      "properties": {
        "autoscaling": {
          "description": "Configuration required by cluster autoscaler to adjust the size of the node pool to the current cluster usage. To disable autoscaling, set minNodeCount and maxNodeCount to 0.",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "maxNodeCount",
            "minNodeCount"
          ],
          "properties": {
            "maxNodeCount": {
              "description": "Maximum number of nodes in the NodePool. Must be >= min_node_count.",
              "type": "integer"
            },
            "minNodeCount": {
              "description": "Minimum number of nodes in the NodePool. Must be >=0 and <= max_node_count.",
              "type": "integer"
            }
          }
        },
        "clusterRef": {
          "type": "object",
          "properties": {
            "external": {
              "description": "Allowed value: The `name` field of a `ContainerCluster` resource.",
              "type": [
                "string",
                "null"
              ]
            },
            "name": {
              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": [
                "string",
                "null"
              ]
            },
            "namespace": {
              "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
              "type": [
                "string",
                "null"
              ]
            }
          }
        },
        "initialNodeCount": {
          "description": "Immutable. The initial number of nodes for the pool. In regional or multi-zonal clusters, this is the number of nodes per zone. Changing this will force recreation of the resource.",
          "type": [
            "integer",
            "null"
          ]
        },
        "location": {
          "description": "Immutable. The location (region or zone) of the cluster.",
          "type": "string"
        },
        "management": {
          "description": "Node management configuration, wherein auto-repair and auto-upgrade is configured.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "autoRepair": {
              "description": "Whether the nodes will be automatically repaired.",
              "type": [
                "boolean",
                "null"
              ]
            },
            "autoUpgrade": {
              "description": "Whether the nodes will be automatically upgraded.",
              "type": [
                "boolean",
                "null"
              ]
            }
          }
        },
        "maxPodsPerNode": {
          "description": "Immutable. The maximum number of pods per node in this node pool. Note that this does not work on node pools which are \"route-based\" - that is, node pools belonging to clusters that do not have IP Aliasing enabled.",
          "type": [
            "integer",
            "null"
          ]
        },
        "namePrefix": {
          "description": "Immutable. Creates a unique name for the node pool beginning with the specified prefix. Conflicts with name.",
          "type": [
            "string",
            "null"
          ]
        },
        "networkConfig": {
          "description": "Networking configuration for this NodePool. If specified, it overrides the cluster-level defaults.",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "podRange"
          ],
          "properties": {
            "createPodRange": {
              "description": "Immutable. Whether to create a new range for pod IPs in this node pool. Defaults are provided for pod_range and pod_ipv4_cidr_block if they are not specified.",
              "type": [
                "boolean",
                "null"
              ]
            },
            "podIpv4CidrBlock": {
              "description": "Immutable. The IP address range for pod IPs in this node pool. Only applicable if create_pod_range is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. /14) to have a range chosen with a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14) to pick a specific range to use.",
              "type": [
                "string",
                "null"
              ]
            },
            "podRange": {
              "description": "Immutable. The ID of the secondary range for pod IPs. If create_pod_range is true, this ID is used for the new range. If create_pod_range is false, uses an existing secondary range with this ID.",
              "type": "string"
            }
          }
        },
        "nodeConfig": {
          "description": "Immutable. The configuration of the nodepool.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "bootDiskKMSCryptoKeyRef": {
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "external": {
                  "description": "Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "namespace": {
                  "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            },
            "diskSizeGb": {
              "description": "Immutable. Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB.",
              "type": [
                "integer",
                "null"
              ]
            },
            "diskType": {
              "description": "Immutable. Type of the disk attached to each node. Such as pd-standard, pd-balanced or pd-ssd.",
              "type": [
                "string",
                "null"
              ]
            },
            "ephemeralStorageConfig": {
              "description": "Immutable. Parameters for the ephemeral storage filesystem.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "localSsdCount"
              ],
              "properties": {
                "localSsdCount": {
                  "description": "Immutable. Number of local SSDs to use to back ephemeral storage. Uses NVMe interfaces. Each local SSD is 375 GB in size.",
                  "type": "integer"
                }
              }
            },
            "gcfsConfig": {
              "description": "Immutable. GCFS configuration for this node.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "enabled"
              ],
              "properties": {
                "enabled": {
                  "description": "Immutable. Whether or not GCFS is enabled.",
                  "type": "boolean"
                }
              }
            },
            "guestAccelerator": {
              "description": "Immutable. List of the type and count of accelerator cards attached to the instance.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": [
                  "object",
                  "null"
                ],
                "required": [
                  "count",
                  "type"
                ],
                "properties": {
                  "count": {
                    "description": "Immutable. The number of the accelerator cards exposed to an instance.",
                    "type": "integer"
                  },
                  "gpuPartitionSize": {
                    "description": "Immutable. Size of partitions to create on the GPU. Valid values are described in the NVIDIA mig user guide (https://docs.nvidia.com/datacenter/tesla/mig-user-guide/#partitioning).",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "type": {
                    "description": "Immutable. The accelerator type resource name.",
                    "type": "string"
                  }
                }
              }
            },
            "gvnic": {
              "description": "Immutable. Enable or disable gvnic in the node pool.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "enabled"
              ],
              "properties": {
                "enabled": {
                  "description": "Immutable. Whether or not gvnic is enabled.",
                  "type": "boolean"
                }
              }
            },
            "imageType": {
              "description": "The image type to use for this node. Note that for a given image type, the latest version of it will be used.",
              "type": [
                "string",
                "null"
              ]
            },
            "kubeletConfig": {
              "description": "Node kubelet configs.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "cpuManagerPolicy"
              ],
              "properties": {
                "cpuCfsQuota": {
                  "description": "Enable CPU CFS quota enforcement for containers that specify CPU limits.",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "cpuCfsQuotaPeriod": {
                  "description": "Set the CPU CFS quota period value 'cpu.cfs_period_us'.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "cpuManagerPolicy": {
                  "description": "Control the CPU management policy on the node.",
                  "type": "string"
                }
              }
            },
            "labels": {
              "description": "Immutable. The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node.",
              "type": [
                "object",
                "null"
              ],
              "additionalProperties": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "linuxNodeConfig": {
              "description": "Parameters that can be configured on Linux nodes.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "sysctls"
              ],
              "properties": {
                "sysctls": {
                  "description": "The Linux kernel parameters to be applied to the nodes and all pods running on the nodes.",
                  "type": "object",
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              }
            },
            "localSsdCount": {
              "description": "Immutable. The number of local SSD disks to be attached to the node.",
              "type": [
                "integer",
                "null"
              ]
            },
            "machineType": {
              "description": "Immutable. The name of a Google Compute Engine machine type.",
              "type": [
                "string",
                "null"
              ]
            },
            "metadata": {
              "description": "Immutable. The metadata key/value pairs assigned to instances in the cluster.",
              "type": [
                "object",
                "null"
              ],
              "additionalProperties": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "minCpuPlatform": {
              "description": "Immutable. Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform.",
              "type": [
                "string",
                "null"
              ]
            },
            "nodeGroupRef": {
              "description": "Immutable. Setting this field will assign instances\nof this pool to run on the specified node group. This is useful\nfor running workloads on sole tenant nodes.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "external": {
                  "description": "Allowed value: The `name` field of a `ComputeNodeGroup` resource.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "namespace": {
                  "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            },
            "oauthScopes": {
              "description": "Immutable. The set of Google API scopes to be made available on all of the node VMs.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "preemptible": {
              "description": "Immutable. Whether the nodes are created as preemptible VM instances.",
              "type": [
                "boolean",
                "null"
              ]
            },
            "sandboxConfig": {
              "description": "Immutable. Sandbox configuration for this node.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "sandboxType"
              ],
              "properties": {
                "sandboxType": {
                  "description": "Type of the sandbox to use for the node (e.g. 'gvisor').",
                  "type": "string"
                }
              }
            },
            "serviceAccountRef": {
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "external": {
                  "description": "Allowed value: The `email` field of an `IAMServiceAccount` resource.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "name": {
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "namespace": {
                  "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            },
            "shieldedInstanceConfig": {
              "description": "Immutable. Shielded Instance options.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "enableIntegrityMonitoring": {
                  "description": "Immutable. Defines whether the instance has integrity monitoring enabled.",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "enableSecureBoot": {
                  "description": "Immutable. Defines whether the instance has Secure Boot enabled.",
                  "type": [
                    "boolean",
                    "null"
                  ]
                }
              }
            },
            "spot": {
              "description": "Immutable. Whether the nodes are created as spot VM instances.",
              "type": [
                "boolean",
                "null"
              ]
            },
            "tags": {
              "description": "Immutable. The list of instance tags applied to all nodes.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "taint": {
              "description": "Immutable. List of Kubernetes taints to be applied to each node.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": [
                  "object",
                  "null"
                ],
                "required": [
                  "effect",
                  "key",
                  "value"
                ],
                "properties": {
                  "effect": {
                    "description": "Immutable. Effect for taint.",
                    "type": "string"
                  },
                  "key": {
                    "description": "Immutable. Key for taint.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Immutable. Value for taint.",
                    "type": "string"
                  }
                }
              }
            },
            "workloadMetadataConfig": {
              "description": "The workload metadata configuration for this node.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "mode": {
                  "description": "Mode is the configuration for how to expose metadata to workloads running on the node.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "nodeMetadata": {
                  "description": "DEPRECATED. Deprecated in favor of mode. NodeMetadata is the configuration for how to expose metadata to the workloads running on the node.",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            }
          }
        },
        "nodeCount": {
          "description": "The number of nodes per instance group. This field can be used to update the number of nodes per instance group but should not be used alongside autoscaling.",
          "type": [
            "integer",
            "null"
          ]
        },
        "nodeLocations": {
          "description": "The list of zones in which the node pool's nodes should be located. Nodes must be in the region of their regional cluster or in the same region as their cluster's zone for zonal clusters. If unspecified, the cluster-level node_locations will be used.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "placementPolicy": {
          "description": "Immutable. Specifies the node placement policy.",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "description": "Type defines the type of placement policy.",
              "type": "string"
            }
          }
        },
        "resourceID": {
          "description": "Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.",
          "type": [
            "string",
            "null"
          ]
        },
        "upgradeSettings": {
          "description": "Specify node upgrade settings to change how many nodes GKE attempts to upgrade at once. The number of nodes upgraded simultaneously is the sum of max_surge and max_unavailable. The maximum number of nodes upgraded simultaneously is limited to 20.",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "maxSurge",
            "maxUnavailable"
          ],
          "properties": {
            "maxSurge": {
              "description": "The number of additional nodes that can be added to the node pool during an upgrade. Increasing max_surge raises the number of nodes that can be upgraded simultaneously. Can be set to 0 or greater.",
              "type": "integer"
            },
            "maxUnavailable": {
              "description": "The number of nodes that can be simultaneously unavailable during an upgrade. Increasing max_unavailable raises the number of nodes that can be upgraded in parallel. Can be set to 0 or greater.",
              "type": "integer"
            }
          }
        },
        "version": {
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "status": {
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions represent the latest available observation of the resource's current state.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "Last time the condition transitioned from one status to another.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "message": {
                "description": "Human-readable message indicating details about last transition.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "reason": {
                "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "status": {
                "description": "Status is the status of the condition. Can be True, False, Unknown.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "type": {
                "description": "Type is the type of the condition.",
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          }
        },
        "instanceGroupUrls": {
          "description": "The resource URLs of the managed instance groups associated with this node pool.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "managedInstanceGroupUrls": {
          "description": "List of instance group URLs which have been assigned to this node pool.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.",
          "type": [
            "integer",
            "null"
          ]
        },
        "operation": {
          "type": [
            "string",
            "null"
          ]
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "container.cnrm.cloud.google.com",
      "kind": "ContainerNodePool",
      "version": "v1beta1"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}