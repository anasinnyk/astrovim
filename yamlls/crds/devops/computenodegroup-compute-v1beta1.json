{
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "compute.cnrm.cloud.google.com/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "ComputeNodeGroup"
      ]
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "type": [
        "object",
        "null"
      ],
      "required": [
        "nodeTemplateRef",
        "zone"
      ],
      "properties": {
        "autoscalingPolicy": {
          "description": "Immutable. If you use sole-tenant nodes for your workloads, you can use the node\ngroup autoscaler to automatically manage the sizes of your node groups.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "maxNodes": {
              "description": "Immutable. Maximum size of the node group. Set to a value less than or equal\nto 100 and greater than or equal to min-nodes.",
              "type": [
                "integer",
                "null"
              ]
            },
            "minNodes": {
              "description": "Immutable. Minimum size of the node group. Must be less\nthan or equal to max-nodes. The default value is 0.",
              "type": [
                "integer",
                "null"
              ]
            },
            "mode": {
              "description": "Immutable. The autoscaling mode. Set to one of the following:\n  - OFF: Disables the autoscaler.\n  - ON: Enables scaling in and scaling out.\n  - ONLY_SCALE_OUT: Enables only scaling out.\n  You must use this mode if your node groups are configured to\n  restart their hosted VMs on minimal servers. Possible values: [\"OFF\", \"ON\", \"ONLY_SCALE_OUT\"].",
              "type": [
                "string",
                "null"
              ]
            }
          }
        },
        "description": {
          "description": "Immutable. An optional textual description of the resource.",
          "type": [
            "string",
            "null"
          ]
        },
        "initialSize": {
          "description": "Immutable. The initial number of nodes in the node group. One of 'initial_size' or 'size' must be specified.",
          "type": [
            "integer",
            "null"
          ]
        },
        "maintenancePolicy": {
          "description": "Immutable. Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT, RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT.",
          "type": [
            "string",
            "null"
          ]
        },
        "maintenanceWindow": {
          "description": "Immutable. contains properties for the timeframe of maintenance.",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "startTime"
          ],
          "properties": {
            "startTime": {
              "description": "Immutable. instances.start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.",
              "type": "string"
            }
          }
        },
        "nodeTemplateRef": {
          "description": "The node template to which this node group belongs.",
          "type": "object",
          "properties": {
            "external": {
              "description": "Allowed value: The `selfLink` field of a `ComputeNodeTemplate` resource.",
              "type": [
                "string",
                "null"
              ]
            },
            "name": {
              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": [
                "string",
                "null"
              ]
            },
            "namespace": {
              "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
              "type": [
                "string",
                "null"
              ]
            }
          }
        },
        "resourceID": {
          "description": "Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.",
          "type": [
            "string",
            "null"
          ]
        },
        "size": {
          "description": "Immutable. The total number of nodes in the node group. One of 'initial_size' or 'size' must be specified.",
          "type": [
            "integer",
            "null"
          ]
        },
        "zone": {
          "description": "Immutable. Zone where this node group is located.",
          "type": "string"
        }
      }
    },
    "status": {
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions represent the latest available observation of the resource's current state.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "Last time the condition transitioned from one status to another.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "message": {
                "description": "Human-readable message indicating details about last transition.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "reason": {
                "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "status": {
                "description": "Status is the status of the condition. Can be True, False, Unknown.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "type": {
                "description": "Type is the type of the condition.",
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          }
        },
        "creationTimestamp": {
          "description": "Creation timestamp in RFC3339 text format.",
          "type": [
            "string",
            "null"
          ]
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.",
          "type": [
            "integer",
            "null"
          ]
        },
        "selfLink": {
          "type": [
            "string",
            "null"
          ]
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "compute.cnrm.cloud.google.com",
      "kind": "ComputeNodeGroup",
      "version": "v1beta1"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}